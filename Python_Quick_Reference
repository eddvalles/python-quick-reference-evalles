________________________________________________________________________________________________________________________
##Pycharm Shortcuts:##
Double shift -- Search Everywhere
    Quickly find any file, action, class, symbol, tool window, or setting in Pycharm, in your project, and in the
    current Git repository
Alt + Enter -- Find Action
    Find a command and execute it, open a tool window, or search for a setting
________________________________________________________________________________________________________________________
Resources:
- dir(file)         -- Use on an open file object to see an attributes list that includes methods
- help(file)        -- For general help
- help(file.read)   -- For help on a specific method such as read()
________________________________________________________________________________________________________________________
##String Methods:##
________________________________________________________________________________________________________________________
f"mystring {}" -- Identifies a string as a formatted string. Allows you to place variables in the braces.
r"mystring"    -- Identifies the string as a raw string, which can help treat backslashes as literals.

Finding and Replacing:

my_string.replace(old, new) -- Returns a copy of the string with all occurrences of the substring old replaced by________________________________________________________________________________________________________________________
##Pycharm Shortcuts:##
Double shift -- Search Everywhere
    Quickly find any file, action, class, symbol, tool window, or setting in Pycharm, in your project, and in the
    current Git repository
Alt + Enter -- Find Action
    Find a command and execute it, open a tool window, or search for a setting

REMEMBER:
zip() -- A useful function to consider when working with multiple lists. Refer to 'add.py' for reference or your
    'add.py' solution in Python Morsels
    - Python 3.10's built-in zip() function now accepts an optional 'strict=' argument which will check that the lengths
        of the given iterables are the same

    Use Case: ** Use debugger for visual **
        def add(matrix1, matrix2):
            for row1, row2 in zip(matrix1, matrix2):
                row = []
                for n, m in zip(row1, row2):
                    row.append(n + m)
                combined.append(row)
            return combined
________________________________________________________________________________________________________________________
Resources:
- dir(file)         -- Use on an open file object to see an attributes list that includes methods
- help(file)        -- For general help
- help(file.read)   -- For help on a specific method such as read()
________________________________________________________________________________________________________________________
##String Methods:##

f"mystring {}" -- Identifies a string as a formatted string. Allows you to place variables in the braces.
r"mystring"    -- Identifies the string as a raw string, which can help treat backslashes as literals.

Finding and Replacing:

my_string.replace(old, new) -- Returns a copy of the string with all occurrences of the substring old replaced by the string new.
                     The old and new arguments may be string variables or string literals.
my_string.replace(old, new, count) -- Same as above, except only replaces the first count occurrences of old.

my_str = 'Boo Hoo!'
my_str.find(x) -- Returns the index of the first occurrence of item x in the string, else returns -1. x may be a string
           variable or string literal.
           my_str.find('!') #Returns 7

my_str.find(x, start, end) -- Same as find(x, start) but stops the search at index end -1:
           my_str.find('oo', 2) #Returns 5

my_str.rfind(x) -- Same as find(x) but searches the string in reverse, returning the last occurrence in the string.

my_str.count(x)     -- Returns the number of times x occurs in the string.
                my_str.count('oo') #Returns 2

my_str.isalnum()    -- Returns True if all characters in the string are lowercase or uppercase letters, or the numbers 0-9
my_str.isdigit()    -- Returns True if all characters are the numbers 0-9
my_str.isalpha()    -- Returns True if all characters are alphabetic and there is at least one character
my_str.islower()    -- Returns True if all cased characters are lowercase letters
my_str.isupper()    -- Returns True if all cased characters are uppercase letters
my_str.isspace()    -- Returns True if all characters are whitespace
my_str.startswith(x)-- Return True if the string starts with x
my_str.endswith(x)  -- Returns True if the string ends with x

Creating new strings from a string-
my_str.capitalize() -- Returns a copy of the string with the first character capitalized and the rest lowercased
my_str.title()      -- Returns a copy of the string as a title, with first letters of words capitalized
my_str.lower()      -- Returns a copy of the string with all characters lowercased
my_str.upper()      -- Returns a copy of the string with all characters uppercased
my_str.strip()      -- Returns a copy of the string with leading and trailing whitespace removed
my_str.lstrip()     -- Returns a copy of the string with leading whitespace removed
my_str.rstrip()     -- Returns a copy of the string with trailing whitespace removed

Splitting and Joining Strings -
my_str.split() -- Splits a string into a list of tokens. Each token is a substring that forms part of a larger string.
           A separator is a character or sequence of characters that indicates where to split the string into tokens.
           Ex. "Martin Luther Kind Jr.'.split() using whitespace, creates ['Martin', 'Luther', 'King']
           Ex. 'a#b#c'.split(#) uses the '#' operator to create ['a', 'b', 'c']
my_list.join() -- Performs the inverses operation of split() by joining a list of strings together to create a single string.
           Ex. my_str = '@'.join(['bill gates', 'microsoft']) assigns my_str with 'billgates@microsoft'.

my_str.center(width, fillchar) -- Returns a space-padded string with the original string centered to a total of width columns.
my_str.ljust(width, fillchar) -- Returns a space-padded string with the original string left-justified to a total of width columns.
my_str.rjust(width, fillchar) -- Returns a space-padded string with the original string right-justified to a toal of width columns.

Format Specifiers:
blueCar = Car("Blue", 20000)
print(f"The {self.color} car has {self.mileage:,} miles") #Prints "The blue car has 20,000 miles."
________________________________________________________________________________________________________________________
##List Methods##
my_list = [1, 2, 3]  -- Creates a list
list(iter)           -- Creates a list
                        Ex. my_list = list('123') #Creates ['1', '2', '3']

list2 = list1[:]     -- Creates a copy of an existing list
my_list[start:end]   -- Get a new list containing some of another list's elements
                        Ex. print(my_list[1:3]) #prints [2, 3]
my_list[index]       -- Get an element from a list
my_list + my_list2   -- Get a new list with elements of my_list2 concatenated to the end of my_list
                        Ex. my_list = [1, 2] + [3] #Creates [1, 2, 3]
my_list[i] = x       -- Change the value of the ith element in place
                        Ex. my_list[1] = 9 #Creates [1, 9, 3]
del my_list[i]       -- Delete an element from a list.
                        Ex. del my_list[1] #Creates [1, 3]

Adding Elements:
list.append(x)      -- Add an item to the end of list
list.extend(x)      -- Add all items in x to list
                       Ex. my_list = [5, 8]//my_list.extend([4, 12]) #Creates [5, 8, 4, 12]
list.insert(i, x)   -- Insert x into list before position i

Removing Elements:
list.remove(x)      -- Remove first item from list with value x
list.pop()          -- Remove and return last item in list
list.pop(i)         -- Remove and return item at position i in list

Modifying Elements:
list.sort()             -- Sort the items of list in-place (least-to-greatest) #Modifies the existing list
list.sort(reverse=True) -- Sort the items of list in-place (greatest-to-least)
sorted(list)            -- Returns a new sorted list (least-to greatest)
list.reverse()          -- Reverses a list - does not sort

Miscellaneous:
list.index(x)           -- Returns index of first item in list with value x
list.count(x)           -- Count the number of times value x is in list


Iterations over lists:
all(list) -- Returns True if every element in list is True (!=0) or if the list is empty
any(list) -- Returns True if any element in the list is True
max(list) -- Get the largest value in that list
min(list) -- Get the smallest value in that list
sum(list) -- Get the sum of all elements in the list

List Comprehensions:
[expression(i) for i in old_list if filter(i)] - Basic Syntax
*List comprehensions run at C language speed inside the interpreter*
Ex.
string = "Employee ID: 12345"
numbers = [x for x in string if x.isdigit()] #Extracts numbers. isalpha() would pull letters

________________________________________________________________________________________________________________________
## Tuples ##
t = 1, 2, 3, 4 #Python understands that this is a Tuple if there are no (), [], {}
t1 = ()        #Create an empty tuple
t2 = tuple()   #Create an empty tuple
t3 = ("a",)    #Create a tuple with a single element. Comma is necessary to identify tuple, else would be read a string
t4 = (1, 3, 5) #Create a tuple with three elements
t5 = tuple([1, 2, 3, 4, 5])  #Create a tuple from a list
t6 = tuple("abac") #t6 is ('a', 'b', 'a', 'c') #Create a tuple from a string
t = ('a', 'b', 'c', 'd', 'e')
t = ('A',) + t[1:] #Creates ('A', 'b', 'c', 'd', 'e')
________________________________________________________________________________________________________________________
## Sets ## Are much faster than lists
Elements in a set must be immutable (Tuples, floats, ints, strings)

s1 = set() #Create an empty set
s2 = {1, 3, 5} #Create a set with three elements
s3 = set((1, 3, 5)) #Create a  set from a tuple
s4 = set([1, 2, 4, 5, 5, 2]) #s4 is now {1, 2, 4, 5}
s5 = set("abac") #s5 is {'a', 'b', 'c'}

set.add(x)    -- Adds a value to the set
set.remove(x) -- Removes a value from the set
len(set)      -- Returns the number of elements in the set
max(set)      -- Returns the largest value in the set
min(set)      -- Returns the smallest value in the set
sum(set)      -- Returns to total sum of the values in the set

s1 = {1, 2, 4}
s2 = {1, 4, 5, 2, 6}
s1.issubset(s2)     -- Returns True if every element in s1 is also in s2
s2.issuperset(s1)   -- Returns True if s2 contains all the elements in s1

Comparison Operators:
s1 == s2 -- Returns True if s1 and s2 contain the same elements
s1 > s2  -- Returns True if s1 is a proper superset of s2
s1 >= s2 -- Return True if s1 is a superset of s2
s1 < s2  -- Returns True if s1 is a proper subset of s2
s1 <= s2 -- Returns True if s1 is a subset of s2

Set Operations:
s1 = {1, 2, 4}
s2 = {1, 3, 5}
s1.intersection(s2) -- Returns all the elements that appear in both sets #{1}
s1 & s2             -- Returns all the elements that appear in both sets #{1}

s1.union(s2)        -- Returns all the values from both sets. All the values are unique. #{1, 2, 3, 4, 5}
s1 | s2             -- Returns all the values from both sets. All the values are unique. #{1, 2, 3, 4, 5}

s1.difference(s2)   -- Returns all the elements in s1, that are not in s2 #Returns {2, 4}
s1 - s2             -- Returns all the elements in s1, that are not in s2 #Returns {2, 4}

s1.symmetric_difference(s2) -- Removes the elements that appear in both sets. All values are unique. #{2, 3, 4, 5}
s1 ^ s2                     -- Removes the elements that appear in both sets. All values are unique. #{2, 3, 4, 5}
________________________________________________________________________________________________________________________
## Dictionary Operations ##
my_dict[key]         -- Indexing operation - Retrieves the value associated with a key
my_dict[key] = value -- Adds an entry if the entry does not exist, else modifies existing value
del my_dict[key]     -- Deletes the key from the dictionary
key in my_dict       -- Tests for existence of key in my_dict

Dictionary Methods -
my_dict.clear()           -- Removes all items from the dictionary
my_dict.get(key, default) -- Reads the value of the key. If the key does not exist, returns default.
my_dict1.update(my_dict2) -- Merges my_dict1 with my_dict2. Existing entries in my_dict1 are overwritten if the same keys
                             exist in my_dict2.
my_dict.pop(key, default) -- Removes and returns the key value from the dictionary. If the key does not exst, returns default.

Iterating through a dictionary:
dict.items()  -- Returns a view object that yields (key, value) tuples
dict.keys()   -- Returns a view object that yields dictionary keys
dict.values() -- Returns a view object that yields dictionary values

Creating Dictionaries:
bob = dict(name='Bob Smith', age=42, pay=30000, job='dev') #Keyword Arguments and Type Constructor

sue = {}, sue['name'] = 'Sue Jones' #Filling out a dictionary field one at a time

#Zipping together name/value lists
names = ['name', 'age', 'pay', 'job']
values = ['Sue Jones', 45, 40000, 'hdw']
sue = dict(zip(names, values))

#Sequence of key values and an optional starting value for all keys (Useful for initializing empty dict)
fields = ('name', 'age', 'job', 'pay')
record = dict.fromkeys(fields, None) #{'job':None, 'pay':None...}

Dictionary of Dictionaries:
bob = dict(name='Bob Smith', age=42, pay=30000, job='dev')
sue = dict(name='Sue Jones', age=45, pay=40000, job='hdw')

db = {}
db['bob'] = bob
db['sue'] = sue #You can continue to add more records to the dictionary
db['bob']['name'] #fetch Bob's name
db['sue']['pay'] #fetch Sue's pay

for key in db:
    print(db[key]['name'].split()[-1])
    db[key]['pay'] *= 1.10

for record in db.values(): print(record['pay'])
________________________________________________________________________________________________________________________
## File Operations ##
Resources:
OReilly Programming Python -- Chapter 4. File and Directory Tools

Modules:
struct - Provides calls to pack and unpack binary data, as though the data was laid out in a C-language struct
    declaration. It is also capable of composing and decomposing using any endian-ness (determines whether the most
    significant bits of binary numbers are on the left or right side. Recall, little-endian).

Testing File Existence:
import os.path #Checks if a file name exists
if os.path.isfile(filename):
    print("filename exists")

Commands:
open() -- Requires a single argument that specified the path to a file.
    For special needs, here are a few things you should know about three 'open' arguments:
    Filename
        -- If omitted, the file name is taken to be relative to the current working directory
        -- Can be an explicit directory path (absolute)
        -- Can be a relative filename argument such as r'..\temp\spam.txt'
    Open mode
        Modes for opening files:
        'r'  -- Open the file for reading (Default, if mode is omitted)
        'r+' -- Open the file for reading and writing
        'w'  -- Open the file for writing. If the file does not exist, the file is created. Contents of an existing file are
                overwritten.
        'w+' -- Allows reads and writes but creates the file anew, erasing any prior content
        'a'  -- Open the file for appending. If file does not exist then the file is created. Writes are added to the end of
                of existing file contents.
        'rb' -- Opens a file for reading binary data
        'r+b'-- Combines binary mode and input plus output (does not initialize the file to be empty)
        'wb' -- Opens a file for writing binary data
        'wb+'-- Combines binary mode and input plus output (initializes the file to be empty)
        NOTE: The '+' modes are often used in conjunction with the file object's seek() method to achieve random
            read/write access. Refer to page 153 in Programming Python, 'Random Access Files'
    Buffering Policy (optional: default is 'enable full buffering')
        Lets you control buffering for the file - the way that data is queued up before being transferred, to boost
        performance.
        0  -- File operations are unbuffered; data is transferred immediately, but allowed in binary modes only
        1  -- File operations are line buffered
        >1 -- Full buffering (any values greater than 1)

file.write(str)   -- Writes the string to the specified file. Returns the number of chars or bytes written.
file.writelines() -- Writes strings from a list into a file with no extra formatting.

file.read()      -- Returns a string containing all the characters (or bytes) stored in the file
file.readlines() -- Returns a list of strings, where the first element is the contents of the first line, the second
                    element is the content of the second line, and so on.
    NOTE: read() and readlines() load the ENTIRE file into memory at once. Fast, but memory costly. If speed matters and
        your file isn't huge, these may be the best methods.

file.read(n)      -- Returns a string containing the next N characters (or bytes) stored in the file.
file.readline()  -- Reads through the next \n and returns a string. Uses an empty string as a sentinel when EOF reached.
    NOTE: read(n) and readline() fetch PART of the file (N-character or byte block, next line, respectively) and are
        safer for potentially big files but a bit less convenient and sometimes slower. Both return an empty string
        when they reach the end of the file.

file.seek(0) - Returns the cursor back to the start of the file to prevent reopening of file

Text Files: (For encoding/decoding, refer to page 147 on Programming Python)
Text-mode files always translate data according to a default or provided Unicode encoding type, when the data is
transferred to and from external file. Their content is encoded on files, but decoded in memory.
Consider the following string, which embeds a Unicode character whose binary value is outside the normal 8-bit range
of the ASCII encoding standard.
    data = 'sp\xe4m' # Outputs 'späm'
    0xe4 -> 228, bin(0xe4) -> '0b11100100', chr(0xe4) -> ä

Binary:
You MUST supply byte strings for binary mode output - normal strings are not raw binary data, but are decoded Unicode
characters (a.k.a code points) which are encoded to binary on text-mode output.
You MUST open truly binary data in binary mode for input, because it will generally not be decodable as Unicode text.
May be used as a last resort for reading text files, if they cannot be decoded per the underlying platform's default,
and the encoding type is unknown.
Ex.
    open('data.bin', 'wb').write(b'Spam\n')
    open('data.bin', 'rb').read()               # outputs b'Spam\n'
Last Resort:
    open('data.txt', 'w', encoding='cp500').writelines(['spam\n', 'ham\n'])
    open('data.txt', 'r', encoding='cp500').readlines() # Outputs ['spam\n', 'ham\n']

    open('data.txt', 'r').readlines() #Unicode Decode error, character 0x81 maps to <undefined>
    open('data.txt', 'rb').readlines() #Outputs [b'\xa2\x97\x96\r%\x88\x81\x94\r%']

End-of-line characters:
    Be mindful of the translations that occur between reading in binary or text-mode.
    Refer to page 149, End-of-line translations for text files in Programming Python
    \n - Unix-Like systems
    \r\n - Windows systems

    - For files opened in text mode, \r\n is translated to \n when input
    - For files opened in text mode, \n is translated to \r\n when output
    - For files opened in binary mode, no translation occurs on input or output

    The short story to remember here is that you should generally use \n to refer to end-of-line in all of your text
    file content, and you should always open binary data in binary file modes to supress both end-of-line translations
    and any Unicode encodings. A file's content generally determines its open mode, and file open modes usually process
    file content exactly as we want.

File closure:
    file.close()     -- Closes the file, after which no more reads or writes to the file are allowed.

    try-except:
    myfile = open(filename, 'w')
    try:
        ... process myfile ...
    except:
        ... catch errors ...
    finally:                    # Performed under all circumstances

    with:
    # Guarantees file closure whether an exception occurs during the statement or not
    with open(filename, 'w') as myfile, open(filename, 'w') as thisfile, open()...:
        ... process files, auto-closed on statement exit

open('data.txt').readlines()                                # always read lines
list(open('data.txt'))                                      # force line iteration

lines = [line.rstrip() for line in open('data.txt')]        # list comprehension

list(map(str.split, open('data.txt')))                      # apply a function

line = 'Hello file world!\n'                                # line membership
line in open('data.txt')

Loops:
while line != '':                   -- Can extract a line at a time using readline()
    //Code block statements here
    //line = file.readline()
file.close()

for line in open('data.txt'):            -- Can extract a line at a time like a readline()
    //Code block statements here         -- Does not load the entire file into a line's list all at once.

You can read the lines in a program and analyze through all of them. Use case for this would be trying to find a
global variable within the programs because you forgot where it was.
print(open('scanfile.py', 'r').read())
________________________________________________________________________________________________________________________
## Exception Handling and Debugging ##
try:
    <body>
except <ExceptionType>:  #Executed if an error of specific type is described
    <handlerN>           #Implies there can be multiple specified exception types
except:                  #Is the Exception Catch-all if not specific
    <handlerN>
...
else:
    <process_else>       #Raised if no exception is raised in the try body
finally:
    <process_finally>    #Intended to define clean-up actions that must be performed under all circumstances
________________________________________________________________________________________________________________________
##Pickling##
To pickle an object:
    *Import the pickle module
    *Open a file for binary writing
    *Call the pickle.dump function
        pickle.dump(object, file)
    *Close the file
Ex.
import pickle
menu = {'Hamburger':2.00, 'French Fries':1.50, 'Soda':1.25}
outfile = open("c:\\TestData\\menu.dat", 'wb')
pickle.dump(menu, outfile)
outfile.close()

To unpickle an object:
    *Import the pickle module
    *Open a file for binary reading
    *Call the pickle.load function
        pickle.load(file)
    *Close the file
Ex.
import pickle
infile = open("C:\\TestData\\menu.dat", 'rb')
new_menu = pickle.load(infile) #Will contain the menu dictionary
print(new_menu)
infile.close()

##Shelve Module##
A shelve appears to be a persistent dictionary of persistent objects; Python does all the work in mapping its content
to and from a file. The below example shows how to store in-memory dictionary objects in a shelve for permanent keeping.

from initdata import bob
import shelve
db = shelve.open('people-shelve')
db['bob'] = bob
db.close()
________________________________________________________________________________________________________________________
##Iterables##
Ex.
x = iter([1, 2, 3]) #Creates an object used to track the iterations
x.__next__()  --Returns the next iteration of the iteration object. Raises 'StopIteration' error when end is reached.
next(my_iter) -- Does same as x.__next__()

ITERABLE:
*Anything that can be looper over
    *You can loop over a string or a file
*Anything that can appear on the right-side of a for-loop
    for x in iterable: ...

ITERATOR:
*An object with a state that remembers where it is during iteration
*An object with a __next__ method that:
    *Returns the next value in the iteration
    *Updates the state to point at the next value
    *Signals when it is done by raising StopIteration
________________________________________________________________________________________________________________________
##RegEx##
Resources:
Automate The Boring Stuff

Here are some of the things regular expressions can help you do:
1. Validating text input
2. Parsing data
3. Searching and Replacing
4. Renaming a hundred files at a time in an advanced file manager

abc... -- Letters
123... -- Digits
\d     -- Any Digit
\D     -- Any non-Digit character
.      -- Any character
\.     -- Period
[abc]  -- Only a or b or c
[^abc] -- Not a or b or c
[a-z]  -- Characters a to z
[0-9]  -- Numbers 0 to 9
\w     -- Any Alphanumeric character [a-zA-Z0-9]
\W     -- Any non-Alphanumeric character
{m}    -- m Repetitions
{m, n} -- m to n Repetitions #{m,} will match m instances and forever, {,n} will match 0 to N instances
*      -- Zero or more repetitions
+      -- One or more repetitions
?         -- Optional character
\s        -- Any Whitespace
\S        -- Any Non-Whitespace character
^ $       -- Starts and Ends
(...)     -- Capture group #To compare actual ( or ) use the \( or \)
(a(bc))   -- Capture sub-group
(.*)      -- Capture all
(abc|def) -- Matches abc or def #Use with mo.group() will return the first instance it runs into. Use findall() instead

re.compile() -- Returns a Regex Object
regexObject.search(string) -- Searches the string it passed for any matches to the regex
mo.group()   -- Returns the actual matched text from the searched string #0, 1, 2 specifies groups to return
mo.groups()  -- Returns a tuple containing all the groups found #('415', '555-4242'), groups are defined by the ()
findall() -- Returns list of strings (when there are not regex groups), else Returns list of tuples

phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo = phoneNumRegex.search('My number is 415-555-4242.')
print('Phone number found: ' + mo.group()) #'415-555-4242'

phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') #has no groups
phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000') #['415-555-9999', '212-555-0000']

phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)') #Has groups
phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000') #[(415-555-9999),(212-555-0000)]

________________________________________________________________________________________________________________________
-- sys MODULE --
To get help:
sys.__doc__
dir(sys)
help(sys)

sys.modules -- Use this to display or process all the modules loaded by a program
sys.argv -- Will return a list of the arguments given in the command prompt
    #['commands.py', 'hillbillies.txt'] created from the cmd 'python commands.py hillbillies.txt'
    - In this scenario, you pass the text file 'hillbillies.txt' to the python program 'commands.py'
    - 'commands.py' contains a function that will read in the contents of the text file and perform actions on them
    USE CASE:
        filename = 'data.txt'
        if len(sys.argv) == 2: filename = sys.argv[1]
        - In this scenario, instead of keeping 'data.txt' as the file to read from, we grabbed the file to read from
        - from the command given at the command terminal

Use Cases:
    for line in sys.stdin: print(line)
        **output**:
            This will parrot out the input that is typed into the command prompt
________________________________________________________________________________________________________________________
-- os MODULE --
To get help:
os.__doc__
help(os)
dir (os) or dir(os.path) etc.

Tools in the os Module:
Shell variables         -- os.environ
Running programs        -- os.system, os.popen, os.execv, os.spawnv
Spawning processes      -- os.fork, os.pipe, os.waitpid, os.kill
Descriptor files, locks -- os.open, os.read, os.write
File processing         -- os.remove, os.rename, os.mkfifo, os.mkdir, os.rmdir
Administrative Tools    -- os.getcwd, os.chdir, os.chmod, os.getpid, os.listdir, os.access
Portability Tools       -- os.sep, os.pathsep, os.curdir, os.path.split, os.path.join
Pathname Tools          -- os.path.exists('path'), os.path.isdir('path'), os.path.getsize('path')

os.chdir('')            -- Change your directory by providing the pathname
os.getcwd()             -- Returns the current working directory

Files:
    - os calls process files by their descriptors, which are integer codes or "handles" that identify files in the OS
    - Descriptor-based files deal in raw bytes, and have no notion of line-end or Unicode translations
    - Lower level and more complex than the built-in 'open()' function

    Standard Stream File Descriptors - Numeric labels used to define command input/output
        -- 0 Standard Input (stdin) - Represents information input to a command during execution
        -- 1 Standard Output (stdout) - Represents the desired output from a command (Default,if omitted)
        -- 2 Standard Error (stderr) - Represents any error messages generated by a command
        -- Greater than two, is the File Descriptor, which needs to be used to manipulate files

    fileno() -- Returns the integer DESCRIPTOR associated with a built-in file object
        for stream in (sys.stdin, sys.stdout, sys.stderr):
            print(stream.fileno()) # Output: 0, 1, 2

    os.open(PATH, FLAGS, MODE) -- Opens a file and returns its DESCRIPTOR
        - Allows you to specify mode advanced things like exclusive access (O_EXCL) and NONBLOCKING modes (O_NONBLOCK)
            when a file is opened
        - Flags may not be portable across all systems (use dir(os) to view available flags)
        - O_EXCL - Portable way to LOCK files for concurrent updates or other process synchronization. Useful for
            threads, and programs running in parallel.
    os.read(DESCRIPTOR, N) -- Reads at most N bytes and returns a byte string
    os.write(DESCRIPTOR, STRING) -- Writes bytes in byte string string to the file
        file = open(f'./spam.txt', 'w')
        file.write('Hello stdio file\n')
        file.flush()
        fd = file.fileno() # fd = 58

        os.write(58, b'Hello descriptor world\n')    # Write via os module
        file.close()
    os.lseek(DESCRIPTOR, POSITION, HOW) -- Moves to position in the file
    os.rename() -- Used to rename a file in the system
        os.rename(r'C:\temp\spam.txt', r'C:\temp\eggs.txt')
    os.remove() -- Used to delete a file from the system (synonymous with os.unlink())


os.popen() -- Runs a shell command string and gives us a file object from which we can read the command's output.
    'dir /B'       - Gives us the current directory structure as a list
    'dir *.bin /B' - Uses a wildcard to return the directory listings ending in .bin
    'data.txt'     - Will open up the specific file

os.listdir() -- Takes a directory name string, and returns a list containing the names of all entries in that directory,
    both simple files and nested directories - for use in the calling script.
    os.listdir()          -- Gives us the current directory structure as a list
    os.listdir('.')       -- Gives us the current directory structure as a list
    os.listdir(os.curdir) -- Gives us the current directory structure as a list

os.walk() -- Generator function; Is called with a directory root name and automatically walks the
    entire tree at root and below. yields a three-item tuple ('cwd', ['subdirectories'], ['files']).

    for (dirname, subshere, fileshere) in os.walk('.'):...
    os.walk('.') -- walks through the current working directory
    os.walk(directory, topdown=False) -- walks through the directory using a bottom-up approach. Default, Top-down

    If you want to see what's going on in the os.walk generator, call it's __next__ method:
        gen = os.walk(r'C:\temp\test')
        gen.__next__() # (directory, [subdirectories], [filenames])
        gen.__next__() # (newdir, [newsubdirs], [newfiles])...

os.exec() -- Variants that allow us to configure environment variables, pass CLI arguments...
    os.execv(program, commandlinesequence) -- Is passed an executable program's name, along with a list or tuple of
        command-line argument strings used to run the executable.
    os.execl(program, cmdarg1, cmdarg2...) -- The basic 'l' exec form is passed an executable's name, followed by one or
        more command-line arguments passed as individual function arguments. This is the same as
        os.execv(program, (cmdarg1, cmdarg2,...))
    os.execlp()
    os.execvp() -- Adding the letter p to the exec and execl names means that Python will locate the executable's
        directory using your system search-path setting (i.e., PATH).
    os.execle()
    os.execve() -- Adding a letter e to the execv and execl names means an extra, last argument is a dictionary containing
        shell environment variables to send to the program.
    os.execvpe()
    os.execlpe() -- Adding the letters p and e to the basic exec names means to use the search path AND to accept a
        shell environment settings dictionary.

Use Cases:
    [file for file in os.listdir() if file.endswith('.txt')] #Creates ['data.txt', 'hillbillies.txt',...]

    import os #The below shows you how to walk through a given directory and the resulting output
    directory = 'C:\\Users\\Valles\\PycharmProjects\\ProgrammingPython\\'
    for (dirname, subshere, fileshere) in os.walk(directory):
        print("Directory: ", dirname)
        print("Subdirectories: ", subshere)
        print("Files:", fileshere)
        print()

    import os
    for (dirname, subshere, fileshere) in os.walk('.'):
        print('[' + dirname + ']')
        for fname in fileshere:
            print(os.path.join(dirname, fname))


________________________________________________________________________________________________________________________
-- glob MODULE --
Description:
    Is used to collect the names of all entries in a directory -- files and subdirectories -- whose names match a given
    filename pattern. Is faster, more portable, and more uniform across all Python platforms.

glob.glob() -- A tool that accepts a filename pattern to expand and returns a list of matching file names
    '*'     -- Gives us the current directory structure as a list
    '*.bin' -- Returns the cwd listings ending in .bin
    '*.txt' -- Returns the cwd listings ending in .txt

Use Cases:
    for path in glob.glob(r'PP3E\Examples\PP3E\*\s*.py'): print(path)
        **output**:
            PP3E\Examples\PP3E\Lang\summer-alt.py
            PP3E\Examples\PP3E\Lang\summer.py
            PP3E\Examples\PP3E\Lang\search_all.py

    dirname = r'C:\Users\Valles\PycharmProjects\ProgrammingPython'
    for file in glob.glob(dirname + '\*\*.txt'):
        head, tail = os.path.split(file)                #Creates a list containing the filepath and the file
        print(head, tail, '=>', ('C:\\Other\\' + tail)) #Perhaps you can use makedir() to make an actual file ?

    for file in os.listdir(dirname): #Will scan through the given directory and retrieve the files within
    print(dirname, file, '=>', os.path.join(dirname, file)) #os.path will give you the path for the file

________________________________________________________________________________________________________________________
 the string new.
                     The old and new arguments may be string variables or string literals.
my_string.replace(old, new, count) -- Same as above, except only replaces the first count occurrences of old.

my_str = 'Boo Hoo!'
my_str.find(x) -- Returns the index of the first occurrence of item x in the string, else returns -1. x may be a string
           variable or string literal.
           my_str.find('!') #Returns 7

my_str.find(x, start, end) -- Same as find(x, start) but stops the search at index end -1:
           my_str.find('oo', 2) #Returns 5

my_str.rfind(x) -- Same as find(x) but searches the string in reverse, returning the last occurrence in the string.

my_str.count(x)     -- Returns the number of times x occurs in the string.
                my_str.count('oo') #Returns 2

my_str.isalnum()    -- Returns True if all characters in the string are lowercase or uppercase letters, or the numbers 0-9
my_str.isdigit()    -- Returns True if all characters are the numbers 0-9
my_str.isalpha()    -- Returns True if all characters are alphabetic and there is at least one character
my_str.islower()    -- Returns True if all cased characters are lowercase letters
my_str.isupper()    -- Returns True if all cased characters are uppercase letters
my_str.isspace()    -- Returns True if all characters are whitespace
my_str.startswith(x)-- Return True if the string starts with x
my_str.endswith(x)  -- Returns True if the string ends with x

Creating new strings from a string-
my_str.capitalize() -- Returns a copy of the string with the first character capitalized and the rest lowercased
my_str.title()      -- Returns a copy of the string as a title, with first letters of words capitalized
my_str.lower()      -- Returns a copy of the string with all characters lowercased
my_str.upper()      -- Returns a copy of the string with all characters uppercased
my_str.strip()      -- Returns a copy of the string with leading and trailing whitespace removed
my_str.lstrip()     -- Returns a copy of the string with leading whitespace removed
my_str.rstrip()     -- Returns a copy of the string with trailing whitespace removed

Splitting and Joining Strings -
my_str.split() -- Splits a string into a list of tokens. Each token is a substring that forms part of a larger string.
           A separator is a character or sequence of characters that indicates where to split the string into tokens.
           Ex. "Martin Luther Kind Jr.'.split() using whitespace, creates ['Martin', 'Luther', 'King']
           Ex. 'a#b#c'.split(#) uses the '#' operator to create ['a', 'b', 'c']
my_list.join() -- Performs the inverses operation of split() by joining a list of strings together to create a single string.
           Ex. my_str = '@'.join(['bill gates', 'microsoft']) assigns my_str with 'billgates@microsoft'.

my_str.center(width, fillchar) -- Returns a space-padded string with the original string centered to a total of width columns.
my_str.ljust(width, fillchar) -- Returns a space-padded string with the original string left-justified to a total of width columns.
my_str.rjust(width, fillchar) -- Returns a space-padded string with the original string right-justified to a toal of width columns.

Format Specifiers:
blueCar = Car("Blue", 20000)
print(f"The {self.color} car has {self.mileage:,} miles") #Prints "The blue car has 20,000 miles."
________________________________________________________________________________________________________________________
##List Methods##
my_list = [1, 2, 3]  -- Creates a list
list(iter)           -- Creates a list
                        Ex. my_list = list('123') #Creates ['1', '2', '3']

list2 = list1[:]     -- Creates a copy of an existing list
my_list[start:end]   -- Get a new list containing some of another list's elements
                        Ex. print(my_list[1:3]) #prints [2, 3]
my_list[index]       -- Get an element from a list
my_list + my_list2   -- Get a new list with elements of my_list2 concatenated to the end of my_list
                        Ex. my_list = [1, 2] + [3] #Creates [1, 2, 3]
my_list[i] = x       -- Change the value of the ith element in place
                        Ex. my_list[1] = 9 #Creates [1, 9, 3]
del my_list[i]       -- Delete an element from a list.
                        Ex. del my_list[1] #Creates [1, 3]

Adding Elements:
list.append(x)      -- Add an item to the end of list
list.extend(x)      -- Add all items in x to list
                       Ex. my_list = [5, 8]//my_list.extend([4, 12]) #Creates [5, 8, 4, 12]
list.insert(i, x)   -- Insert x into list before position i

Removing Elements:
list.remove(x)      -- Remove first item from list with value x
list.pop()          -- Remove and return last item in list
list.pop(i)         -- Remove and return item at position i in list

Modifying Elements:
list.sort()             -- Sort the items of list in-place (least-to-greatest) #Modifies the existing list
list.sort(reverse=True) -- Sort the items of list in-place (greatest-to-least)
sorted(list)            -- Returns a new sorted list (least-to greatest)
list.reverse()          -- Reverses a list - does not sort

Miscellaneous:
list.index(x)           -- Returns index of first item in list with value x
list.count(x)           -- Count the number of times value x is in list


Iterations over lists:
all(list) -- Returns True if every element in list is True (!=0) or if the list is empty
any(list) -- Returns True if any element in the list is True
max(list) -- Get the largest value in that list
min(list) -- Get the smallest value in that list
sum(list) -- Get the sum of all elements in the list

List Comprehensions:
[expression(i) for i in old_list if filter(i)] - Basic Syntax
*List comprehensions run at C language speed inside the interpreter*
Ex.
string = "Employee ID: 12345"
numbers = [x for x in string if x.isdigit()] #Extracts numbers. isalpha() would pull letters

________________________________________________________________________________________________________________________
## Tuples ##
t = 1, 2, 3, 4 #Python understands that this is a Tuple if there are no (), [], {}
t1 = ()        #Create an empty tuple
t2 = tuple()   #Create an empty tuple
t3 = ("a",)    #Create a tuple with a single element. Comma is necessary to identify tuple, else would be read a string
t4 = (1, 3, 5) #Create a tuple with three elements
t5 = tuple([1, 2, 3, 4, 5])  #Create a tuple from a list
t6 = tuple("abac") #t6 is ('a', 'b', 'a', 'c') #Create a tuple from a string
t = ('a', 'b', 'c', 'd', 'e')
t = ('A',) + t[1:] #Creates ('A', 'b', 'c', 'd', 'e')
________________________________________________________________________________________________________________________
## Sets ## Are much faster than lists
Elements in a set must be immutable (Tuples, floats, ints, strings)

s1 = set() #Create an empty set
s2 = {1, 3, 5} #Create a set with three elements
s3 = set((1, 3, 5)) #Create a  set from a tuple
s4 = set([1, 2, 4, 5, 5, 2]) #s4 is now {1, 2, 4, 5}
s5 = set("abac") #s5 is {'a', 'b', 'c'}

set.add(x)    -- Adds a value to the set
set.remove(x) -- Removes a value from the set
len(set)      -- Returns the number of elements in the set
max(set)      -- Returns the largest value in the set
min(set)      -- Returns the smallest value in the set
sum(set)      -- Returns to total sum of the values in the set

s1 = {1, 2, 4}
s2 = {1, 4, 5, 2, 6}
s1.issubset(s2)     -- Returns True if every element in s1 is also in s2
s2.issuperset(s1)   -- Returns True if s2 contains all the elements in s1

Comparison Operators:
s1 == s2 -- Returns True if s1 and s2 contain the same elements
s1 > s2  -- Returns True if s1 is a proper superset of s2
s1 >= s2 -- Return True if s1 is a superset of s2
s1 < s2  -- Returns True if s1 is a proper subset of s2
s1 <= s2 -- Returns True if s1 is a subset of s2

Set Operations:
s1 = {1, 2, 4}
s2 = {1, 3, 5}
s1.intersection(s2) -- Returns all the elements that appear in both sets #{1}
s1 & s2             -- Returns all the elements that appear in both sets #{1}

s1.union(s2)        -- Returns all the values from both sets. All the values are unique. #{1, 2, 3, 4, 5}
s1 | s2             -- Returns all the values from both sets. All the values are unique. #{1, 2, 3, 4, 5}

s1.difference(s2)   -- Returns all the elements in s1, that are not in s2 #Returns {2, 4}
s1 - s2             -- Returns all the elements in s1, that are not in s2 #Returns {2, 4}

s1.symmetric_difference(s2) -- Removes the elements that appear in both sets. All values are unique. #{2, 3, 4, 5}
s1 ^ s2                     -- Removes the elements that appear in both sets. All values are unique. #{2, 3, 4, 5}
________________________________________________________________________________________________________________________
## Dictionary Operations ##
my_dict[key]         -- Indexing operation - Retrieves the value associated with a key
my_dict[key] = value -- Adds an entry if the entry does not exist, else modifies existing value
del my_dict[key]     -- Deletes the key from the dictionary
key in my_dict       -- Tests for existence of key in my_dict

Dictionary Methods -
my_dict.clear()           -- Removes all items from the dictionary
my_dict.get(key, default) -- Reads the value of the key. If the key does not exist, returns default.
my_dict1.update(my_dict2) -- Merges my_dict1 with my_dict2. Existing entries in my_dict1 are overwritten if the same keys
                             exist in my_dict2.
my_dict.pop(key, default) -- Removes and returns the key value from the dictionary. If the key does not exst, returns default.

Iterating through a dictionary:
dict.items()  -- Returns a view object that yields (key, value) tuples.
dict.keys()   -- Returns a view object that yields dictionary keys
dict.values() -- Returns a view object that yields dictionary values.

Creating Dictionaries:
bob = dict(name='Bob Smith', age=42, pay=30000, job='dev') #Keyword Arguments and Type Constructor

sue = {}, sue['name'] = 'Sue Jones' #Filling out a dictionary field one at a time

#Zipping together name/value lists
names = ['name', 'age', 'pay', 'job']
values = ['Sue Jones', 45, 40000, 'hdw']
sue = dict(zip(names, values))

#Sequence of key values and an optional starting value for all keys (Useful for initializing empty dict)
fields = ('name', 'age', 'job', 'pay')
record = dict.fromkeys(fields, None) #{'job':None, 'pay':None...}

Dictionary of Dictionaries:
bob = dict(name='Bob Smith', age=42, pay=30000, job='dev')
sue = dict(name='Sue Jones', age=45, pay=40000, job='hdw')

db = {}
db['bob'] = bob
db['sue'] = sue #You can continue to add more records to the dictionary
db['bob']['name'] #fetch Bob's name
db['sue']['pay'] #fetch Sue's pay

for key in db:
    print(db[key]['name'].split()[-1])
    db[key]['pay'] *= 1.10

for record in db.values(): print(record['pay'])
________________________________________________________________________________________________________________________
## File Operations ##

Testing File Existence:
import os.path #Checks if a file name exists
if os.path.isfile(filename):
    print("filename exists")

Commands:
open() -- Requires a single argument that specified the path to a file.
    For special needs, here are a few things you should know about three 'open' arguments:
    Filename
        -- If omitted, the file name is taken to be relative to the current working directory
        -- Can be an explicit directory path (absolute)
        -- Can be a relative filename argument such as r'..\temp\spam.txt'
    Open mode
        Modes for opening files:
        'r'  -- Open the file for reading (Default, if mode is omitted)
        'r+' -- Open the file for reading and writing
        'w'  -- Open the file for writing. If the file does not exist, the file is created. Contents of an existing file are
                overwritten.
        'w+' -- Allows reads and writes but creates the file anew, erasing any prior content
        'a'  -- Open the file for appending. If file does not exist then the file is created. Writes are added to the end of
                of existing file contents.

        'rb' -- Opens a file for reading binary data
        'r+b'-- Combines binary mode and input plus output
        'wb' -- Opens a file for writing binary data
        'wb+'-- Combines binary mode and input plus output
        NOTE: The '+' modes are often used in conjunction with the file object's seek() method to achieve random
            read/write access.
    Buffering Policy (optional: default is 'enable full buffering')
        Lets you control buffering for the file - the way that data is queued up before being transferred, to boost
        performance.
        0  -- File operations are unbuffered; data is transferred immediately, but allowed in binary modes only
        1  -- File operations are line buffered
        >1 -- Full buffering (any values greater than 1)

file.write(str)   -- Writes the string to the specified file. Returns the number of chars or bytes written.
file.writelines() -- Writes strings from a list into a file with no extra formatting.

file.read()      -- Returns a string containing all the characters (or bytes) stored in the file
file.readlines() -- Returns a list of strings, where the first element is the contents of the first line, the second
                    element is the content of the second line, and so on.
    NOTE: read() and readlines() load the ENTIRE file into memory at once. Fast, but memory costly. If speed matters and
        your file isn't huge, these may be the best methods.

file.read(n)      -- Returns a string containing the next N characters (or bytes) stored in the file.
file.readline()  -- Reads through the next \n and returns a string. Uses an empty string as a sentinel when EOF reached.
    NOTE: read(n) and readline() fetch PART of the file (N-character or byte block, next line, respectively) and are
        safer for potentially big files but a bit less convenient and sometimes slower. Both return an empty string
        when they reach the end of the file.

file.seek(0) - Returns the cursor back to the start of the file to prevent reopening of file

Binary:
You MUST supply byte strings for binary mode output - normal strings are not raw binary data, but are decoded Unicode
characters (a.k.a code points) which are encoded to binary on text-mode output.
You MUST open truly binary data in binary mode for input, because it will generally not be decodable as Unicode text.
Ex.
    open('data.bin', 'wb').write(b'Spam\n')
    open('data.bin', 'rb').read()               # outputs b'Spam\n'


File closure:
    file.close()     -- Closes the file, after which no more reads or writes to the file are allowed.

    try-except:
    myfile = open(filename, 'w')
    try:
        ... process myfile ...
    except:
        ... catch errors ...
    finally:                    # Performed under all circumstances

    with:
    # Guarantees file closure whether an exception occurs during the statement or not
    with open(filename, 'w') as myfile, open(filename, 'w') as thisfile, open()...:
        ... process files, auto-closed on statement exit

open('data.txt').readlines()                                # always read lines
list(open('data.txt'))                                      # force line iteration

lines = [line.rstrip() for line in open('data.txt')]        # list comprehension

list(map(str.split, open('data.txt')))                      # apply a function

line = 'Hello file world!\n'                                # line membership
line in open('data.txt')

Loops:
while line != '':                   -- Can extract a line at a time using readline()
    //Code block statements here
    //line = file.readline()
file.close()

for line in open('data.txt'):            -- Can extract a line at a time like a readline()
    //Code block statements here         -- Does not load the entire file into a line's list all at once.

You can read the lines in a program and analyze through all of them. Use case for this would be trying to find a
global variable within the programs because you forgot where it was.
print(open('scanfile.py', 'r').read())
________________________________________________________________________________________________________________________
## Exception Handling ##
try:
    <body>
except <ExceptionType>:  #Executed if an error of specific type is described
    <handlerN>           #Implies there can be multiple specified exception types
except:                  #Is the Exception Catch-all if not specific
    <handlerN>
...
else:
    <process_else>       #Raised if no exception is raised in the try body
finally:
    <process_finally>    #Intended to define clean-up actions that must be performed under all circumstances
________________________________________________________________________________________________________________________
##Pickling##
To pickle an object:
    *Import the pickle module
    *Open a file for binary writing
    *Call the pickle.dump function
        pickle.dump(object, file)
    *Close the file
Ex.
import pickle
menu = {'Hamburger':2.00, 'French Fries':1.50, 'Soda':1.25}
outfile = open("c:\\TestData\\menu.dat", 'wb')
pickle.dump(menu, outfile)
outfile.close()

To unpickle an object:
    *Import the pickle module
    *Open a file for binary reading
    *Call the pickle.load function
        pickle.load(file)
    *Close the file
Ex.
import pickle
infile = open("C:\\TestData\\menu.dat", 'rb')
new_menu = pickle.load(infile) #Will contain the menu dictionary
print(new_menu)
infile.close()

##Shelve Module##
A shelve appears to be a persistent dictionary of persistent objects; Python does all the work in mapping its content
to and from a file. The below example shows how to store in-memory dictionary objects in a shelve for permanent keeping.

from initdata import bob
import shelve
db = shelve.open('people-shelve')
db['bob'] = bob
db.close()
________________________________________________________________________________________________________________________
##Iterables##
Ex.
x = iter([1, 2, 3]) #Creates an object used to track the iterations
x.__next__()  --Returns the next iteration of the iteration object. Raises 'StopIteration' error when end is reached.
next(my_iter) -- Does same as x.__next__()

ITERABLE:
*Anything that can be looper over
    *You can loop over a string or a file
*Anything that can appear on the right-side of a for-loop
    for x in iterable: ...

ITERATOR:
*An object with a state that remembers where it is during iteration
*An object with a __next__ method that:
    *Returns the next value in the iteration
    *Updates the state to point at the next value
    *Signals when it is done by raising StopIteration
________________________________________________________________________________________________________________________
##RegEx##
Resources:
Automate The Boring Stuff

Here are some of the things regular expressions can help you do:
1. Validating text input
2. Parsing data
3. Searching and Replacing
4. Renaming a hundred files at a time in an advanced file manager

abc... -- Letters
123... -- Digits
\d     -- Any Digit
\D     -- Any non-Digit character
.      -- Any character
\.     -- Period
[abc]  -- Only a or b or c
[^abc] -- Not a or b or c
[a-z]  -- Characters a to z
[0-9]  -- Numbers 0 to 9
\w     -- Any Alphanumeric character [a-zA-Z0-9]
\W     -- Any non-Alphanumeric character
{m}    -- m Repetitions
{m, n} -- m to n Repetitions #{m,} will match m instances and forever, {,n} will match 0 to N instances
*      -- Zero or more repetitions
+      -- One or more repetitions
?         -- Optional character
\s        -- Any Whitespace
\S        -- Any Non-Whitespace character
^ $       -- Starts and Ends
(...)     -- Capture group #To compare actual ( or ) use the \( or \)
(a(bc))   -- Capture sub-group
(.*)      -- Capture all
(abc|def) -- Matches abc or def #Use with mo.group() will return the first instance it runs into. Use findall() instead

re.compile() -- Returns a Regex Object
regexObject.search(string) -- Searches the string it passed for any matches to the regex
mo.group()   -- Returns the actual matched text from the searched string #0, 1, 2 specifies groups to return
mo.groups()  -- Returns a tuple containing all the groups found #('415', '555-4242'), groups are defined by the ()
findall() -- Returns list of strings (when there are not regex groups), else Returns list of tuples

phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo = phoneNumRegex.search('My number is 415-555-4242.')
print('Phone number found: ' + mo.group()) #'415-555-4242'

phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') #has no groups
phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000') #['415-555-9999', '212-555-0000']

phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)') #Has groups
phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000') #[(415-555-9999),(212-555-0000)]
________________________________________________________________________________________________________________________
##tkinter##

Resources:
https://www.tutorialspoint.com/python/python_gui_programming.htm
https://tkdocs.com/tutorial/index.html
https://tkdocs.com/tutorial/widgets.html
https://tkdocs.com/tutorial/morewidgets.html

________________________________________________________________________________________________________________________
-- sys MODULE --
To get help:
sys.__doc__
dir(sys)
help(sys)

sys.modules -- Use this to display or process all the modules loaded by a program
sys.argv -- Will return a list of the arguments given in the command prompt
    #['commands.py', 'hillbillies.txt'] created from the cmd 'python commands.py hillbillies.txt'

Use Cases:
    for line in sys.stdin: print(line)
        **output**:
            This will parrot out the input that is typed into the command prompt
________________________________________________________________________________________________________________________
-- os MODULE --
To get help:
os.__doc__
help(os)
dir (os) or dir(os.path) etc.

Tools in the os Module:
Shell variables         -- os.environ
Running programs        -- os.system, os.popen, os.execv, os.spawnv
Spawning processes      -- os.fork, os.pipe, os.waitpid, os.kill
Descriptor files, locks -- os.open, os.read, os.write
File processing         -- os.remove, os.rename, os.mkfifo, os.mkdir, os.rmdir
Administrative Tools    -- os.getcwd, os.chdir, os.chmod, os.getpid, os.listdir, os.access
Portability Tools       -- os.sep, os.pathsep, os.curdir, os.path.split, os.path.join
Pathname Tools          -- os.path.exists('path'), os.path.isdir('path'), os.path.getsize('path')

os.chdir('')            -- Change your directory by providing the pathname
os.getcwd()             -- Returns the current working directory

os.popen() -- Runs a shell command string and gives us a file object from which we can read the command's output.
    'dir /B'       - Gives us the current directory structure as a list
    'dir *.bin /B' - Uses a wildcard to return the directory listings ending in .bin
    'data.txt'     - Will open up the specific file

os.listdir() -- Takes a directory name string, and returns a list containing the names of all entries in that directory,
    both simple files and nested directories - for use in the calling script.
    os.listdir()          -- Gives us the current directory structure as a list
    os.listdir('.')       -- Gives us the current directory structure as a list
    os.listdir(os.curdir) -- Gives us the current directory structure as a list

os.walk() -- Generator function; Is called with a directory root name and automatically walks the
    entire tree at root and below. yields a three-item tuple ('cwd', ['subdirectories'], ['files']).

    for (dirname, subshere, fileshere) in os.walk('.'):...
    os.walk('.') -- walks through the current working directory
    os.walk(directory, topdown=False) -- walks through the directory using a bottom-up approach. Default, Top-down

    If you want to see what's going on in the os.walk generator, call it's __next__ method:
        gen = os.walk(r'C:\temp\test')
        gen.__next__() # (directory, [subdirectories], [filenames])
        gen.__next__() # (newdir, [newsubdirs], [newfiles])...

os.exec() -- Variants that allow us to configure environment variables, pass CLI arguments...
    os.execv(program, commandlinesequence) -- Is passed an executable program's name, along with a list or tuple of
        command-line argument strings used to run the executable.
    os.execl(program, cmdarg1, cmdarg2...) -- The basic 'l' exec form is passed an executable's name, followed by one or
        more command-line arguments passed as individual function arguments. This is the same as
        os.execv(program, (cmdarg1, cmdarg2,...))
    os.execlp()
    os.execvp() -- Adding the letter p to the exec and execl names means that Python will locate the executable's
        directory using your system search-path setting (i.e., PATH).
    os.execle()
    os.execve() -- Adding a letter e to the execv and execl names means an extra, last argument is a dictionary containing
        shell environment variables to send to the program.
    os.execvpe()
    os.execlpe() -- Adding the letters p and e to the basic exec names means to use the search path AND to accept a
        shell environment settings dictionary.

Use Cases:
    [file for file in os.listdir() if file.endswith('.txt')] #Creates ['data.txt', 'hillbillies.txt',...]

    import os #The below shows you how to walk through a given directory and the resulting output
    directory = 'C:\\Users\\Valles\\PycharmProjects\\ProgrammingPython\\'
    for (dirname, subshere, fileshere) in os.walk(directory):
        print("Directory: ", dirname)
        print("Subdirectories: ", subshere)
        print("Files:", fileshere)
        print()

    import os
    for (dirname, subshere, fileshere) in os.walk('.'):
        print('[' + dirname + ']')
        for fname in fileshere:
            print(os.path.join(dirname, fname))


________________________________________________________________________________________________________________________
-- glob MODULE --
Description:
    Is used to collect the names of all entries in a directory -- files and subdirectories -- whose names match a given
    filename pattern. Is faster, more portable, and more uniform across all Python platforms.

glob.glob() -- A tool that accepts a filename pattern to expand and returns a list of matching file names
    '*'     -- Gives us the current directory structure as a list
    '*.bin' -- Returns the cwd listings ending in .bin
    '*.txt' -- Returns the cwd listings ending in .txt

Use Cases:
    for path in glob.glob(r'PP3E\Examples\PP3E\*\s*.py'): print(path)
        **output**:
            PP3E\Examples\PP3E\Lang\summer-alt.py
            PP3E\Examples\PP3E\Lang\summer.py
            PP3E\Examples\PP3E\Lang\search_all.py

    dirname = r'C:\Users\Valles\PycharmProjects\ProgrammingPython'
    for file in glob.glob(dirname + '\*\*.txt'):
        head, tail = os.path.split(file)                #Creates a list containing the filepath and the file
        print(head, tail, '=>', ('C:\\Other\\' + tail)) #Perhaps you can use makedir() to make an actual file ?

    for file in os.listdir(dirname): #Will scan through the given directory and retrieve the files within
    print(dirname, file, '=>', os.path.join(dirname, file)) #os.path will give you the path for the file

________________________________________________________________________________________________________________________
